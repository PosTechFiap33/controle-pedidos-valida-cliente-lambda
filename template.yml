AWSTemplateFormatVersion: '2010-09-09'
Resources:
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaExecutionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'

  ValidaClienteLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: 'ValidaClienteAWSLambda::ValidaClienteAWSLambda.Function::FunctionHandler'
      Role: 
        Fn::GetAtt:
          - 'LambdaExecutionRole'
          - 'Arn'
      Code:
        S3Bucket: 'valida-cliente-lambda'
        S3Key: 'valida-cliente-lambda-package.zip'
      Runtime: 'net8.0'
      Timeout: 30
      MemorySize: 128

  ApiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: 'ValidaClienteLambdaApi'
      Description: 'API Gateway for my Lambda function'

  LambdaApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId:
        Fn::GetAtt:
          - 'ApiGateway'
          - 'RootResourceId'
      PathPart: 'validaCliente'
      RestApiId:
        Ref: 'ApiGateway'

  LambdaApiMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'GET'
      ResourceId:
        Ref: 'LambdaApiResource'
      RestApiId:
        Ref: 'ApiGateway'
      RequestParameters:
        method.request.path.cpf: true
      Integration:
        Type: 'AWS_PROXY'
        IntegrationHttpMethod: 'POST'
        Uri:
          Fn::Sub: 
            - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations'
            - LambdaArn:
                Fn::GetAtt:
                  - 'ValidaClienteLambdaFunction'
                  - 'Arn'
        RequestParameters:
          integration.request.path.cpf: 'method.request.path.cpf'
      MethodResponses:
        - StatusCode: '200'
        - StatusCode: '400'
        - StatusCode: '403'

  ApiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId:
        Ref: 'ApiGateway'
      StageName: 'prod'